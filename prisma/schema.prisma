// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==============================================
// ENUMS
// ==============================================

enum UserRole {
  ADMIN
  MANAGER
  EMPLOYEE
  VIEWER
}

enum UserStatus {
  ACTIVE
  INACTIVE
  ON_LEAVE
  TERMINATED
}

enum ProductStatus {
  IN_STOCK
  LOW_STOCK
  OUT_OF_STOCK
  DISCONTINUED
}

enum TransactionStatus {
  PENDING
  COMPLETED
  REFUNDED
  CANCELLED
}

enum PaymentMethod {
  CASH
  CARD
  CHECK
  BANK_TRANSFER
  DIGITAL_WALLET
}

enum PurchaseOrderStatus {
  PENDING
  CONFIRMED
  SHIPPED
  RECEIVED
  CANCELLED
}

enum InventoryMovementType {
  SALE
  PURCHASE
  ADJUSTMENT
  RETURN
  TRANSFER
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  HALF_DAY
  VACATION
  SICK_LEAVE
}

enum PayrollStatus {
  PENDING
  PROCESSING
  PAID
  FAILED
}

enum ActivitySeverity {
  LOW
  MEDIUM
  HIGH
}

enum TaxType {
  PERCENTAGE
  FIXED
}

// ==============================================
// USER MANAGEMENT
// ==============================================

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  firstName String
  lastName  String
  password  String
  role      UserRole @default(EMPLOYEE)
  status    UserStatus @default(ACTIVE)
  avatar    String?
  phone     String?
  address   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  activityLogs     UserActivityLog[]
  sales           Sale[]
  purchaseOrders  PurchaseOrder[]
  inventoryMovements InventoryMovement[]
  attendance      Attendance[]
  payroll         Payroll[]
  createdCustomers Customer[] @relation("CustomerCreatedBy")
  createdProducts  Product[] @relation("ProductCreatedBy")
  createdSuppliers Supplier[] @relation("SupplierCreatedBy")
  employee        Employee?

  @@map("users")
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  permissions String[] // Array of permission strings
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("roles")
}

model UserActivityLog {
  id        String          @id @default(cuid())
  userId    String
  action    String
  description String
  module    String
  severity  ActivitySeverity @default(LOW)
  ipAddress String
  userAgent String
  timestamp DateTime        @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_activity_logs")
}

// ==============================================
// CUSTOMER MANAGEMENT
// ==============================================

model Customer {
  id          String   @id @default(cuid())
  firstName   String
  lastName    String
  email       String   @unique
  phone       String?
  company     String?
  address     String?
  city        String?
  state       String?
  zipCode     String?
  country     String?
  status      String   @default("active") // active, inactive
  totalOrders Int      @default(0)
  totalSpent  Decimal  @default(0) @db.Decimal(10, 2)
  lastOrder   DateTime?
  joinDate    DateTime @default(now())
  notes       String?
  createdById String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  createdBy User? @relation("CustomerCreatedBy", fields: [createdById], references: [id])
  sales     Sale[]

  @@map("customers")
}

// ==============================================
// SUPPLIER MANAGEMENT
// ==============================================

model Supplier {
  id          String   @id @default(cuid())
  name        String
  contact     String?
  email       String   @unique
  phone       String?
  address     String?
  city        String?
  state       String?
  zipCode     String?
  country     String?
  status      String   @default("active") // active, inactive
  rating      Decimal? @db.Decimal(3, 2)
  totalOrders Int      @default(0)
  totalValue  Decimal  @default(0) @db.Decimal(12, 2)
  lastOrder   DateTime?
  joinDate    DateTime @default(now())
  categories  String[] // Array of category strings
  createdById String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  createdBy      User?            @relation("SupplierCreatedBy", fields: [createdById], references: [id])
  products       Product[]
  purchaseOrders PurchaseOrder[]

  @@map("suppliers")
}

// ==============================================
// PRODUCT MANAGEMENT
// ==============================================

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  parentId    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  parent   Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children Category[] @relation("CategoryHierarchy")
  products Product[]

  @@map("categories")
}

model Product {
  id              String        @id @default(cuid())
  name            String
  sku             String        @unique
  description     String?
  categoryId      String?
  supplierId      String?
  price           Decimal       @db.Decimal(10, 2)
  cost            Decimal       @db.Decimal(10, 2)
  stock           Int           @default(0)
  minStock        Int           @default(0)
  maxStock        Int           @default(0)
  status          ProductStatus @default(IN_STOCK)
  image           String?
  specifications  Json?         // Store product specifications as JSON
  reorderPoint    Int?
  reorderQuantity Int?
  lastRestocked   DateTime?
  createdById     String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relations
  category         Category?          @relation(fields: [categoryId], references: [id])
  supplier         Supplier?          @relation(fields: [supplierId], references: [id])
  createdBy        User?              @relation("ProductCreatedBy", fields: [createdById], references: [id])
  saleItems        SaleItem[]
  purchaseOrderItems PurchaseOrderItem[]
  inventoryMovements InventoryMovement[]
  productLocations ProductLocation[]

  @@map("products")
}

model ProductLocation {
  id        String  @id @default(cuid())
  productId String
  warehouse String
  quantity  Int     @default(0)

  // Relations
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, warehouse])
  @@map("product_locations")
}

// ==============================================
// SALES & POS
// ==============================================

model Sale {
  id            String          @id @default(cuid())
  invoiceId     String          @unique
  customerId    String?
  userId        String
  subtotal      Decimal         @db.Decimal(10, 2)
  tax           Decimal         @db.Decimal(10, 2)
  discount      Decimal         @default(0) @db.Decimal(10, 2)
  shipping      Decimal         @default(0) @db.Decimal(10, 2)
  total         Decimal         @db.Decimal(10, 2)
  status        TransactionStatus @default(PENDING)
  paymentMethod PaymentMethod?
  cashier       String?
  register      String?
  notes         String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  // Relations
  customer Customer?  @relation(fields: [customerId], references: [id])
  user     User       @relation(fields: [userId], references: [id])
  items    SaleItem[]

  @@map("sales")
}

model SaleItem {
  id        String  @id @default(cuid())
  saleId    String
  productId String
  quantity  Int
  price     Decimal @db.Decimal(10, 2)
  total     Decimal @db.Decimal(10, 2)

  // Relations
  sale    Sale    @relation(fields: [saleId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@map("sale_items")
}

// ==============================================
// PURCHASE MANAGEMENT
// ==============================================

model PurchaseOrder {
  id               String              @id @default(cuid())
  poNumber         String              @unique
  supplierId       String
  userId           String
  status           PurchaseOrderStatus @default(PENDING)
  subtotal         Decimal             @db.Decimal(12, 2)
  tax              Decimal             @db.Decimal(12, 2)
  shipping         Decimal             @default(0) @db.Decimal(12, 2)
  total            Decimal             @db.Decimal(12, 2)
  expectedDelivery DateTime?
  receivedDate     DateTime?
  notes            String?
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt

  // Relations
  supplier Supplier            @relation(fields: [supplierId], references: [id])
  user     User                @relation(fields: [userId], references: [id])
  items    PurchaseOrderItem[]
  timeline PurchaseOrderTimeline[]

  @@map("purchase_orders")
}

model PurchaseOrderItem {
  id        String  @id @default(cuid())
  poId      String
  productId String
  quantity  Int
  price     Decimal @db.Decimal(10, 2)
  total     Decimal @db.Decimal(10, 2)

  // Relations
  purchaseOrder PurchaseOrder @relation(fields: [poId], references: [id], onDelete: Cascade)
  product       Product       @relation(fields: [productId], references: [id])

  @@map("purchase_order_items")
}

model PurchaseOrderTimeline {
  id          String   @id @default(cuid())
  poId        String
  status      String
  description String
  date        DateTime @default(now())

  // Relations
  purchaseOrder PurchaseOrder @relation(fields: [poId], references: [id], onDelete: Cascade)

  @@map("purchase_order_timeline")
}

// ==============================================
// INVENTORY MANAGEMENT
// ==============================================

model InventoryMovement {
  id          String                @id @default(cuid())
  productId   String
  userId      String
  type        InventoryMovementType
  quantity    Int
  reference   String? // Reference to sale, purchase order, etc.
  notes       String?
  createdAt   DateTime              @default(now())

  // Relations
  product Product @relation(fields: [productId], references: [id])
  user    User    @relation(fields: [userId], references: [id])

  @@map("inventory_movements")
}

// ==============================================
// HR MANAGEMENT
// ==============================================

model Employee {
  id                String      @id @default(cuid())
  userId            String      @unique
  employeeId        String      @unique
  position          String
  department        String
  managerId         String?
  hireDate          DateTime
  salary            Decimal     @db.Decimal(10, 2)
  status            UserStatus  @default(ACTIVE)
  skills            String[]    // Array of skill strings
  emergencyContact  Json?       // Store emergency contact as JSON
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  // Relations
  user       User         @relation(fields: [userId], references: [id])
  manager    Employee?    @relation("EmployeeManager", fields: [managerId], references: [id])
  subordinates Employee[] @relation("EmployeeManager")
  attendance Attendance[]
  payroll    Payroll[]

  @@map("employees")
}

model Attendance {
  id         String          @id @default(cuid())
  employeeId String
  userId     String
  date       DateTime
  checkIn    DateTime?
  checkOut   DateTime?
  status     AttendanceStatus
  notes      String?
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt

  // Relations
  employee Employee @relation(fields: [employeeId], references: [id])
  user     User     @relation(fields: [userId], references: [id])

  @@unique([employeeId, date])
  @@map("attendance")
}

model Payroll {
  id           String        @id @default(cuid())
  employeeId   String
  userId       String
  basicSalary  Decimal       @db.Decimal(10, 2)
  allowances   Decimal       @default(0) @db.Decimal(10, 2)
  deductions   Decimal       @default(0) @db.Decimal(10, 2)
  overtime     Decimal       @default(0) @db.Decimal(10, 2)
  bonus        Decimal       @default(0) @db.Decimal(10, 2)
  netSalary    Decimal       @db.Decimal(10, 2)
  status       PayrollStatus @default(PENDING)
  payDate      DateTime?
  payPeriod    String        // e.g., "2024-01-01 to 2024-01-31"
  workingDays  Int
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  // Relations
  employee Employee @relation(fields: [employeeId], references: [id])
  user     User     @relation(fields: [userId], references: [id])

  @@map("payroll")
}

// ==============================================
// SYSTEM SETTINGS
// ==============================================

model CompanySettings {
  id          String   @id @default(cuid())
  name        String
  email       String
  phone       String?
  address     String?
  website     String?
  description String?
  logo        String?
  timezone    String   @default("America/New_York")
  dateFormat  String   @default("MM/DD/YYYY")
  timeFormat  String   @default("12h")
  language    String   @default("en")
  currency    String   @default("USD")
  currencySymbol String @default("$")
  decimalPlaces Int    @default(2)
  notifications Boolean @default(true)
  emailNotifications Boolean @default(true)
  smsNotifications Boolean @default(false)
  maintenanceMode Boolean @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("company_settings")
}

model InvoiceSettings {
  id            String   @id @default(cuid())
  prefix        String   @default("INV")
  numberFormat  String   @default("INV-{YYYY}-{MM}-{####}")
  nextNumber    Int      @default(1001)
  footerText    String?
  terms         String?
  logo          String?
  showLogo      Boolean  @default(true)
  showTax       Boolean  @default(true)
  showDiscount  Boolean  @default(true)
  showShipping  Boolean  @default(true)
  currency      String   @default("USD")
  currencySymbol String  @default("$")
  decimalPlaces Int      @default(2)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("invoice_settings")
}

model Tax {
  id        String   @id @default(cuid())
  name      String
  rate      Decimal  @db.Decimal(5, 2)
  type      TaxType  @default(PERCENTAGE)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("taxes")
}

// ==============================================
// REPORTS & ANALYTICS
// ==============================================

model Report {
  id          String   @id @default(cuid())
  name        String
  type        String   // sales, products, inventory, customers
  description String?
  filters     Json?    // Store report filters as JSON
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("reports")
}

// ==============================================
// BACKUP & AUDIT
// ==============================================

model Backup {
  id          String   @id @default(cuid())
  filename    String
  size        BigInt
  type        String   // full, incremental
  status      String   // pending, completed, failed
  createdAt   DateTime @default(now())
  completedAt DateTime?

  @@map("backups")
}